{"version":3,"sources":["Components/Header/index.js","Components/Position/index.js","config/code.js","App.js","serviceWorker.js","index.js"],"names":["Header","Jumbotron","className","Button","href","variant","React","Component","Footer","Toast","style","position","bottom","left","closeButton","Body","id","App","state","code","Container","Row","Col","language","atelierForestDark","wrapLines","showLineNumbers","this","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yOAIqBA,G,6KAEnB,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,aACnB,qDACA,mEAGA,2BACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,qEAAqEC,QAAQ,WAA1F,kB,GAT4BC,IAAMC,Y,0BCDrBC,E,uKAEnB,OACE,kBAACC,EAAA,EAAD,CAAOC,MAAO,CAAEC,SAAU,QAASC,OAAQ,GAAIC,KAAM,KACnD,kBAACJ,EAAA,EAAMT,OAAP,CAAcc,aAAa,EAAOJ,MAAO,CAAC,mBAAoB,UAAW,MAAS,SAChF,4BAAQR,UAAU,WAAlB,uBAEF,kBAACO,EAAA,EAAMM,KAAP,KAAY,0BAAMC,GAAG,cAAT,KAAZ,U,GAP8BV,IAAMC,WCH5B,4TCyCCU,G,kNA7BbC,MAAQ,CAAEC,Q,uDAER,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,MACA,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,qCACA,kBAAC,IAAD,CACEC,SAAS,aACTb,MAAOc,IACPC,WAAW,EACXC,iBAAiB,GAEhBC,KAAKT,MAAMC,MAEd,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAClD,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAClD,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,gCAIxD,kBAAC,EAAD,W,GAxBUb,IAAMC,YCCJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1073b852.chunk.js","sourcesContent":["import React from 'react';\nimport { Jumbotron, Button } from 'react-bootstrap';\nimport './style.css';\n\nexport default class Header extends React.Component {\n  render(){\n  return (\n    <Jumbotron className=\"jumbotron\">\n      <h1>jQuery Scroll Monitor</h1>\n      <p>\n        Monitor browser scroll in percentage\n      </p>\n      <p>\n        <Button href=\"https://github.com/DevUtils/jQueryScrollMonitor/archive/master.zip\" variant=\"primary\">Download</Button>\n      </p>\n    </Jumbotron>)\n  }\n}","import React from 'react';\nimport Toast from 'react-bootstrap/Toast';\n\nexport default class Footer extends React.Component {\n  render(){\n  return (\n    <Toast style={{ position: 'fixed', bottom: 10, left: 10, }}>\n      <Toast.Header closeButton={false} style={{'background-color': '#007eff', 'color': '#fff'}}>\n        <strong className=\"mr-auto\">Scrollbar Position</strong>\n      </Toast.Header>\n      <Toast.Body><span id=\"frPosition\">0</span>%</Toast.Body>\n    </Toast>\n    );\n  }\n}","export default `$(document).ready(function() {\n  $(window).scrollMonitor\n  (\n    {\n      triggers: [0,10,20,30,40,50,60,70,80,90,100],\n      oneShot: false,\n      onTriggerPoint: function(e)\n      {\n        console.log('window scroll shot', e);\n        $('#frPosition').html(e.toString());\n      }\n    }\n  );\n});\n`;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/bootstrap.dark.min.css';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Header from \"./Components/Header\";\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atelierForestDark } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport Position from './Components/Position';\nimport code from './config/code';\nimport './App.css';\n\nclass App extends React.Component {\n  state = { code };\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Container>\n          <Row>\n            <Col>\n              <h3>Usage</h3>\n              <SyntaxHighlighter\n                language=\"javascript\"\n                style={atelierForestDark}\n                wrapLines={false}\n                showLineNumbers={true}\n              >\n                {this.state.code}\n              </SyntaxHighlighter>\n              <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\n              <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\n              <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\n            </Col>\n          </Row>\n        </Container>\n        <Position/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}